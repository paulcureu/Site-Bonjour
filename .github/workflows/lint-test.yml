name: 🧪 CI – Lint & Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    # === Environment variables ===
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/site_db

    # === Service containers ===
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: site_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 0. Checkout repo
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3

      # 1. Instalează PNPM (trebuie să fie pe PATH înainte de setup-node dacă folosești cache: pnpm)
      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.11.0
          run_install: false # instalăm dependențele explicit mai jos

      # 2. Node + cache store pnpm
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm # acum setup-node poate rula `pnpm store path`

      # 3. Instalare dependențe
      - name: 📥 Install deps
        run: pnpm install --frozen-lockfile

      # 4. Prisma generate (generează clientul)
      - name: ⚙️ Prisma generate
        working-directory: apps/api
        run: npx prisma generate

      # 5. Migrații DB
      - name: 🗄️ Prisma migrate deploy
        working-directory: apps/api
        run: npx prisma migrate deploy

      # 6. Lint
      - name: 🧹 Run Lint
        run: pnpm lint

      # 7. Teste + coverage (doar pachetul api)
      - name: 🧪 Run tests with coverage
        run: pnpm --filter api exec -- jest --coverage

      # 8. Build monorepo
      - name: 🏗️ Run Build
        run: pnpm build
